{"version":3,"sources":["logo.svg","layout/Projects.js","layout/Home.js","layout/GitHub.js","layout/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Projects","Component","Home","Github","state","repos","loading","data","this","setState","axios","get","process","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","then","res","class","map","repo","key","href","html","name","language","description","forks","open_issues","watchers","stargazers_count","size","NavBar","style","backgroundColor","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Nav","Link","as","to","exact","path","component","GitHub","App","className","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,qNCiB5BC,EAdf,uKAEQ,OACI,6BAEI,0CAGA,0DARhB,GAA8BC,a,yBCSfC,E,uKARX,OACE,6BACE,wC,GAJWD,a,kBCgHJE,G,aA7Gf,4MACIC,MAAQ,CACJC,MAAO,GACPC,SAAS,EACTC,MAAM,GAJd,kEAOyB,IAAD,OAChBC,KAAKC,SAAS,CAAEH,SAAS,IACzBI,IAAMC,IAAN,oEAAuEC,6HAAYC,2BAAnF,yBAA8HD,6HAAYE,iCACrIC,MAAK,SAAAC,GACF,IAAMX,EAAQW,EAAIT,KAClB,EAAKE,SAAS,CAAEJ,eAZhC,+BA+DQ,OACI,yBAAKY,MAAM,aAEP,2BAAOA,MAAM,kBACT,4BAAI,+CACA,wCACA,2CACA,qCACA,2CACA,wCACA,qCACA,qCAKAT,KAAKJ,MAAMC,MAAMa,KAAI,SAAAC,GAAI,OAErB,wBAAIC,IAAI,MAAK,4BAAI,uBAAGC,KAAMF,EAAKG,MAAM,6BAAMH,EAAKI,QAC5C,mCAASJ,EAAKK,UACd,mCAASL,EAAKM,aAEd,mCAASN,EAAKO,OACd,mCAASP,EAAKQ,aACd,mCAASR,EAAKS,UACd,mCAAST,EAAKU,kBACd,mCAASV,EAAKW,KAAO,gBAzFrD,GAA4B7B,cCmDb8B,EA9Cf,uKAEI,OAEE,6BACE,yBAAKd,MAAM,aACT,yBAAKA,MAAM,uCAAuCe,MAAO,CAAEC,gBAAiB,YAC1E,uBAAGhB,MAAM,eAAeI,KAAK,KAA7B,iBACA,4BAAQJ,MAAM,iBAAiBiB,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACtJ,0BAAMtB,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BuB,GAAG,aACvC,wBAAIvB,MAAM,cAER,wBAAIA,MAAM,YAAW,kBAACwB,EAAA,EAAIC,KAAL,CAAUzB,MAAM,WAAW0B,GAAID,IAAME,GAAG,aAAxC,aAGrB,wBAAI3B,MAAM,YAAW,kBAACwB,EAAA,EAAIC,KAAL,CAAUzB,MAAM,WAAW0B,GAAID,IAAME,GAAG,aAAxC,aAGrB,wBAAI3B,MAAM,YAAW,kBAACwB,EAAA,EAAIC,KAAL,CAAUzB,MAAM,WAAW0B,GAAID,IAAME,GAAG,WAAxC,sBAGrB,wBAAI3B,MAAM,YAAW,kBAACwB,EAAA,EAAIC,KAAL,CAAUzB,MAAM,WAAW0B,GAAID,IAAME,GAAG,aAAxC,gBAQ7B,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjC,kBAAC,IAAD,CAAO4C,KAAK,YAAYC,UAAW/C,IACnC,kBAAC,IAAD,CAAO8C,KAAK,UAAUC,UAAWC,WAnC7C,GAA4B/C,aCUbgD,MAZf,WACE,OACE,yBAAKC,UAAU,OACf,gCAAQ,kBAAC,EAAD,OACR,mCCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTAC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAIJC,IAASC,OAAOF,EAAKG,SAASC,eAAe,W","file":"static/js/main.f6172c40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\n\r\nexport class Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <p>hello world</p>\r\n\r\n                \r\n                <p>testojlkdjdglkjsdfklgj</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Home</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import axios from 'axios'\r\nimport React, { Component } from 'react'\r\nimport { isCompositeComponent } from 'react-dom/test-utils'\r\nimport './GitHub.css';\r\n\r\nexport class Github extends Component {\r\n    state = {\r\n        repos: [],\r\n        loading: false,\r\n        data: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loading: true })\r\n        axios.get(`https://api.github.com/users/leewannacott/repos?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`)\r\n            .then(res => {\r\n                const repos = res.data;\r\n                this.setState({ repos })\r\n            });\r\n\r\n\r\n        // this.setState({ repos: res.data, loading: false, data: true })\r\n\r\n\r\n    }\r\n\r\n\r\n    // state = {\r\n    //     repos: [\r\n    //         {\r\n    //             login: \"LeeWannacott\",\r\n    //             id: 49783296,\r\n    //             node_id: \"MDQ6VXNlcjQ5NzgzMjk2\",\r\n    //             avatar_url: \"https://avatars1.githubusercontent.com/u/49783296?v=4\",\r\n    //             gravatar_id: \"\",\r\n    //             url: \"https://api.github.com/users/LeeWannacott\",\r\n    //             html_url: \"https://github.com/LeeWannacott\",\r\n    //             followers_url: \"https://api.github.com/users/LeeWannacott/followers\",\r\n    //             following_url: \"https://api.github.com/users/LeeWannacott/following{/other_user}\",\r\n    //             gists_url: \"https://api.github.com/users/LeeWannacott/gists{/gist_id}\",\r\n    //             starred_url: \"https://api.github.com/users/LeeWannacott/starred{/owner}{/repo}\",\r\n    //             subscriptions_url: \"https://api.github.com/users/LeeWannacott/subscriptions\",\r\n    //             organizations_url: \"https://api.github.com/users/LeeWannacott/orgs\",\r\n    //             repos_url: \"https://api.github.com/users/LeeWannacott/repos\",\r\n    //             events_url: \"https://api.github.com/users/LeeWannacott/events{/privacy}\",\r\n    //             received_events_url: \"https://api.github.com/users/LeeWannacott/received_events\",\r\n    //             type: \"User\",\r\n    //             site_admin: false,\r\n    //             name: \"Lee Wannacott\",\r\n    //             company: \"WannacottL@gmail.com\",\r\n    //             blog: \"https://www.linkedin.com/in/lee-wannacott-64289b174/\",\r\n    //             location: null,\r\n    //             email: null,\r\n    //             hireable: null,\r\n    //             bio: \"Interested in Business and Data.\\r\\n\",\r\n    //             twitter_username: null,\r\n    //             public_repos: 15,\r\n    //             public_gists: 1,\r\n    //             followers: 0,\r\n    //             following: 1,\r\n    //             created_at: \"2019-04-19T10:38:52Z\",\r\n    //             updated_at: \"2020-10-12T22:50:08Z\"\r\n    //         }\r\n    //     ]\r\n    // }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div class='container'>\r\n\r\n                <table class='table table-sm'>\r\n                    <tr><td>Repository Name</td>\r\n                        <td>Language</td>\r\n                        <td>Description</td>\r\n                        <td>Forks</td>\r\n                        <td>Open issues</td>\r\n                        <td>Watchers</td>\r\n                        <td>Stars</td>\r\n                        <td>Size</td>\r\n\r\n                    </tr>\r\n\r\n                    {\r\n                        this.state.repos.map(repo => (\r\n\r\n                            <tr key='id'><td><a href={repo.html}><div>{repo.name}</div></a></td>\r\n                                <td>    {repo.language}</td>\r\n                                <td>    {repo.description}</td>\r\n\r\n                                <td>    {repo.forks}</td>\r\n                                <td>    {repo.open_issues}</td>\r\n                                <td>    {repo.watchers}</td>\r\n                                <td>    {repo.stargazers_count}</td>\r\n                                <td>    {repo.size + 'kB'}</td>\r\n\r\n\r\n\r\n                            </tr>\r\n                        ))\r\n                    }\r\n\r\n\r\n                </table>\r\n            </div >\r\n\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Github","import React, { Component } from 'react'\r\nimport Projects from './Projects';\r\nimport './Navbar.css';\r\nimport { Link, Route, NavLink, Switch } from 'react-router-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Navbar, Nav, Form, FormControl, Button } from \"react-bootstrap\";\r\nimport Home from './Home'\r\nimport GitHub from './GitHub';\r\n\r\n\r\nexport class NavBar extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <div>\r\n        <div class=\"container\">\r\n          <nav class=\"navbar navbar-light navbar-expand-xl\" style={{ backgroundColor: \"#e3f2fd\" }}>\r\n            <a class=\"navbar-brand\" href=\"#\">Lee Wannacott</a>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n              <ul class=\"navbar-nav\">\r\n                {/* Navbar items */}\r\n                <li class=\"nav-item\"><Nav.Link class='Nav-link' as={Link} to=\"/projects\">\r\n                  Projects\r\n              </Nav.Link></li>\r\n                <li class=\"nav-item\"><Nav.Link class='Nav-link' as={Link} to=\"/projects\">\r\n                  Projects\r\n              </Nav.Link></li>\r\n                <li class=\"nav-item\"><Nav.Link class='Nav-link' as={Link} to=\"/GitHub\">\r\n                  Github Statistics\r\n              </Nav.Link></li>\r\n                <li class=\"nav-item\"><Nav.Link class='Nav-link' as={Link} to=\"/projects\">\r\n                  Contact\r\n              </Nav.Link></li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n        {/* Routing */}\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/projects\" component={Projects} />\r\n            <Route path=\"/GitHub\" component={GitHub} />\r\n          </Switch>\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { render } from '@testing-library/react';\nimport NavBar from './layout/NavBar';\nimport Projects from './layout/Projects';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <header><NavBar /></header>\n    <footer></footer>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));"],"sourceRoot":""}